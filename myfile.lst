     1                                  ; hello.asm
     2                                  section .data            ; 数据段声明
     3 00000000 48656C6C6F2C20776F-             msg db "Hello, world!", 0xA     ; 要输出的字符串
     4 00000009 726C64210A         
     5                                          len equ $ - msg                 ; 字串长度
     6                                  
     7                                  section .text            ; 代码段声明
     8                                  global _start            ; 指定入口函数
     9                                  _start:                  ; 在屏幕上显示一个字符串
    10                                  ;1、设置系统调用号4，采用软中断80可以陷入内核执行
    11                                  ;所有的系统调用和对应的系统调用号都可以在/usr/include/asm/unistd.h中找到
    12                                  ;4号系统调用号为write这个系统调用
    13 00000000 B804000000              mov eax, 4       ; 系统调用号(sys_write)
    14                                  
    15                                  ;2、设置系统调用参数
    16                                  ;man 2 write 可以查看write系统调用的功能
    17                                  ;write函数原型： ssize_t write(int fd,const void *buf,size_t count);
    18 00000005 BB01000000                      mov ebx, 1       ; 参数一：文件描述符(stdout)
    19 0000000A B9[00000000]                    mov ecx, msg     ; 参数二：要显示的字符串
    20 0000000F BA0E000000                      mov edx, len     ; 参数三：字符串长度
    21 00000014 CD80                            int 0x80         ; 调用内核功能。软中断，陷入内核
    22                                  
    23                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    24                                  
    25                                          ; 退出程序
    26                                  ;3、设置系统调用号1，采用软中断80可以陷入内核执行
    27 00000016 B801000000              mov eax, 1       ; 系统调用号(sys_exit)
    28                                  ;4、设置系统调用参数
    29 0000001B BB00000000                      mov ebx, 0       ; 参数一：退出代码
    30 00000020 CD80                            int 0x80         ; 调用内核功能 
